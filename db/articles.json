{"title":"App, main and other controller accessors","subtitle":"Some thoughts on flow's common practices in the front-end","slug":"app,-main-and-other-controller-accessors","body":"When I've started flow, one of the features I wanted for it was scaffolding from the front-end and be able to do things like:\n\n> Flow scaffold model: #User\n\nor:\n\n> Flow scaffold crudFor: #Task \n\nand have created the Model and Controller classes and accessors in environment so you can continue developing the app pulling things from there.\n\nThere are several reasons to have scaffolding features, the utilitarian and most pragmatic reason is that it helps you to show something useful fast. A cheap positive feedback loop that allows you to scaffold the next basic feature of your app. That's something really aligned with flow's mission regarding to productivity.\n\nA secondary good reason is that scaffolding makes it easier to spread basic good practices. It shows by example to new people how to get new models and controllers in an application that can scale in complexity with elegance and high maintainability.\n\nBut I'm not implementing scaffolding just yet.\n\nThe reason why is not being done yet is because we are still in discovery mode of what are those practices. The idea is to really confirm if they are common, general and frequent enough.\n\nIn this article, I'm going to share the current best candidates for those good practices. If I'd have to implement the scaffolding system today, I'd make it build the App and its main controller, the main controller accessors, models and router and here I'd show you how. Also we'll cover here what's the suggested convention to name things and why is convenient to do it that way.\n\n**App and main**\nSince version 0.2.7, a flow-based application has the idea of App and main. A default clone of the flow repo will use the App class and MainController class for a sample tutorial-like application.\n\nThe App class is a convenient starting point to access and \"talk with your app\" whatever app it is. In flow we asume you'll have to investigate things on your app and its controllers so we are trying to make that easy for you. One way is providing easy navigation. Here is how you access the main controller of your application which is the root of the controller's graph.\n\"Used by index.html to start your app.\"\n\n> App start.\n\n> \"Deals with routes definition and is part of the starting process of your frontend.\"\n> App setupRouter.\n> \n> \"Accessor to the instance of MainController of your app.\"\n> App main.\n\nTake the last one for example, it's 2 words, one of 3 characters the other has 4. Really friendly to type. Amber doesn't have autocomplete so by choosing two short words, we are lowering the friction to access the root controller of your application so you can easily inspect, send commands and see how it reacts. Is safe to say it will be used a lot so you'll profit a lot. For example, an inspect on that code allows you to navigate to any controller that got currently instantiated. That makes easy diagnose possible issues and prototype live-coding the next feature.\n\nThe MainController should have as minimum two methods: #home and #reset. You should be able to do:\n\n> \"Get to the default state on the main controller.\"\n> App main reset.\n> \n> \"Answers the 'home' controller of the app.\"\n> App main home.\n> \n> Here is code that implements the #reset method taken from a real application:\n> MainController>>reset\n>  \n self navbar deactivateAll.\n \n>  self hideAllBut: #navbar.\n>  \n>  self home show \n>  \nThat reset method makes the app to instantly show the home without any blinks on the screen.\n\nAccessors\nNow take a look at the #home accessor\n\n> MainController>>home\n>  \"Answers the home controller of the app.\n>  Creates it lazily if needed.\"\n> ^ self ifAbsentAt: #home put: [\n>    HomeController\n>      for: model \n>      on: self\n>      appendingTo: ‘#home-wrapper’ asJQuery ]\n\nSo by just naming it with `App home`, you get it created. Once created, you get that instance as answer every time. That's as close as you can be to zero friction between developer's wish and reality (machine's answer). Just the way things should be.\nNote we are using here the class method to instantiate controllers: #for:on:appendingTo:\n\n> Controller class>>for: aModel on: aParentControllerOrNil appendingTo: aHtmlElement\n>   “Answers a new instance of this controller dedicated to aModel,\n>   child of aParentControllerOrNil and meant to be \n>   appended to aHtmlElement.”\n>   ^ self new\n>    model: aModel;\n>    parent: aParentControllerOrNil;\n>    parentElement: aHtmlElement;\n>    yourself\n\nLets take a look at what it expects:\n* In the for: part it expects the model for the new controller\n* In the on: part it expects the parent controller, a MainController in this case. \n\nNote that the parent controller has sense to be nil only when you instantiate the MainController which is a controller that is the root of the whole graph of controllers.\n\nIn the appendingTo: part it expects a DOM element to be the parent element of whatever that new controller needs to render. Typically that would be a <div> with an id named consistently with the controller class name plus the 'wrapper' suffix as you see in that snippet.\nThe tutorial sample application of a default flow clone has 5 subcontrollers covering from the most basic template based controllers to two-way data binding, composition and client-server RESTful interactions. On its MainController you find 5 accessors: example1, example2, etc. up to example5. They all use the same idea of this #home accessor.\n\n**Models**\n\nModels in flow are really friendly. Creating the class is enough to start using them. They are Mapless objects which means you don't really need to declare in advance what instVars and accessors they need to have in order to be usable by your application.\nThis makes really easy to work in a prototypical way encouraging discovery and experimentation, two really strategic features for innovation projects and startups.\nAny subclass of Model you add is going to be a Mapless. So basically you only care about the model name and add all your model classes. Later you add the methods that makes them to have special behaviour.\nAs general rule, Mapless don't need setters and getters, they use DNU to get and set automatically whatever you tell them to. They will answer nil when you ask for something they don't have.\nIn the following snippet we create an instance of the Visitor class, we set the language according to the browser and we save it in the backend:\n\t\n> \"Create a model of the visitor, set its current language and\n> saves it in the backend.\"\n> | visitor |\n> visitor := Visitor new.\n> visitor language: window navigator language.\n> visitor save.\n> This feature of DNU and returning nil makes them a bit different if you want to have lazy initializations on some of their properties.\n> How does it look a lazy initialization in a mapless?\n> Here is another example taken from real code:\n> Order>>products\n>   \"Answers the products in this order.\n>   Creates the empty collection if needed.\"\n>   super products ifNil: [\n>    self products: OrderedCollection new ].\n>  \n>    ^ super products\n\n**Routes**\n\nLets dig now on the routing system used in flow applications. It all begins at load time. When the frontend is being loaded by your browser using RequireJS, it comes to a moment where it installs the 'App' package containing the App class and all the other classes and methods of your application.\n\t\nWhen Amber installs classes on the package loading process, the classes will receive the initialize message on its class side. If there is none, nothing special will happen but if your class implements it, it will perform those custom actions.\n\t\nIn flow, we use this:\n\t\n> App class>>initialize\n> self setupRouter\n\nSo even before he application starts, it already will have the router programmed to react correctly to whatever your app should do with the given initial and following URIs.\n\nLets see the setupRouter now:\n\n> App class>>setupRouter\n>   \"Program the application reactions for different URI routes.\"\n>   Router rlite\n>    \"Normalization of the home route.\"\n>    add: ‘’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘#’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘#/’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘/’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘home’ do: [ :r | App main reset ];\n>    \"Reactions related to Contact models\"\n>    add: ‘contacts’ do: [ :r | App main showContacts ];\n>    add: ‘contacts/:id’ do: [ :r | \n>      Router set: ‘#/contacts/’,r params id,’/view’ ];\n>    add: ‘contacts/new’ do: [ :r | App main showNewContact ];\n>    add: ‘contacts/:id/view’ do: [ :r | \n>      App main showContactId: r params id ];\n>    add: ‘contacts/:id/edit’ do: [ :r | \n>       App main editContactId: r params id ];\n>    add: ‘products’ do: [ :r | App main showProducts ];\n>    add: ‘products/:id’ do: [ :r | \n>      Router set: ‘#/products/’,r params id,’/view’ ]; \n>    add: ‘products/:id/view’ do: [ :r | \n>      App main showProductId: r params id ];\n>    add: ‘search/:target’ do: [ :r | \n>      App main showSearchResultsFor: r params target ];\n>    yourself\n\nAt this point you'll see that the code is quite self explanatory which is one of the guiding principles behind flow. In the same way this example uses #showNewContact, #showContactId: and editContactId: you would do different routes for different models on your own application.\nBonus\nAs a bonus, here is how #editContactId: looks like:\n\t\n> MainController>>editContactId: anId\n>   self hideAllBut: #navbar.\n>   self contactEditor editId: anId\n\nThe editor accessor that you already can infer:\n\n> \tMainController>>contactEditor\n> ^ self ifAbsentAt: #contactEditor put: [\n>    ContactEditorController\n>    on: self\n>    appendingTo: ‘#contact-editor-wrapper’ asJQuery ]\n> \t\nThe #editId: on the editor controller taking the model from the backend:\n\n> \tContactEditorController>>editId: anId\n>   self showPreloader.\n>   Person\n>    findOne: #{ ‘_id’ -> anId }\n>    then: [ :person |\n>      self editContact: person.\n>      self hidePreloader ]\n>    ifNone: [ ]\n>    onError: [ :res | self showError ]\n\nAnd finally:\n\n> \tContactEditorController>>editContact: aPerson\n>   self model: aPerson.\n>   self show done: [ \"specific stuff\" ]\n\nThe #show method in Controller always return a promise so you can do your own custom stuff when the view gets created asynchronously without complicating your code.\nSo we don't have yet scaffolding today (January 2015) but I hope this article encourages you to write highly readable code on flow.\n\nHappy coding!","createdAt":"2019-09-08T00:57:47.442Z","updatedAt":{"$$date":1567904836741},"publishedAt":"2015-01-26","tags":[],"clapsCount":0,"excerpt":"When I've started flow, one of the features I wanted for it was scaffolding from the front-end and be able to do things like:\n\n> Flow scaffold model: #User\n\nor:\n\n> Flow scaffold crudFor: #Task \n\nand have created the Model and Controller classes and accessors in environment so you can continue developing the app pulling things from there.","_id":"GETUD6ZfKKlcgFKU"}
{"title":"Flow demoed at Smalltalks2014","subtitle":"","slug":"flow-demoed-at-smalltalks2014","body":"![](https://miro.medium.com/max/2560/1*bh9KXrRuT1gNP9B3xcakDA.jpeg)\nIn November 5, 6 and 7th I was at Smalltalks2014 where I presented a talk about Startups and Smalltalk that mentions flow.\n\nI want to say a thanks to the organizers for having me there to bring this topic that gave me the opportunity to share this information among many Smalltalk enthusiasts, but also because I met new friends and found some old ones.\n\nOne common theme I've found: I had many great and deep conversations with lots of them. There is something fundamental that is interesting about this technology that seems to make people to be really conscious and thoughtful.\n\nSpecial thanks to Esteban Maringolo for being a great roommate and pal; to Facundo Vozzi for having big laughs and teaching me about new beers; to Boris Shingarov for deep technical talks about Cathedral's organs and going from the Plank Scale to the Cosmos in half second; to Andrés Valloud for being that pre-adolescent friend sharing games in floppy disks in the 90's rediscovered twenty years later presenting the notion of \"the kid's play is the man's work\"; to Peter Hatch for amazing deep chats and World Conquer plans and talking about George Carlin!; to Allen and Rebeca Wirsf-Brock for great long chats and being part of this Smalltalk invention and making JavaScript better; to Juan Vuletich for helping to figure out \"what should be maximized?\" when using Metcalfe's Law and to James Foster that so kindly showing me a fantastic way to work with Gemstone/S.\n\nThank you guys!!!\n\nAs you can see in the slides of the talk, one of the topics is Single Page Applications and flow is actually quite on topic about that.\nAt the end of the day, it was the \"Show your projects\" section and I demoed flow in about 10 minutes.\n\nIt was nicely received and the video of that might actually get published eventually. I'll share it as soon as I have news on that.\nOne thing that is worth mentioning is that, with Esteban Maringolo, we're actually thinking making a Mapless adaptor to Postgres and with the fantastic work of Sebastian Hiedbrink we had a pre-alpha of flow in Gemstone/S.\n\nCan you feel the power?\n\nExcited?\n\nWe are!\n\nHere are some photos\n\n![](https://miro.medium.com/max/5184/1*xZPUpLZ41JVGEF6AQGbHsw.jpeg)\n\n\nPeter Hatch giving his talk about Virtual Machines, Critical Thinking and Reliability\n\n![](https://miro.medium.com/max/6528/1*yi9RlJuRq9ygxoVBaIp2wg.jpeg)\n\n\nAndrés Valloud and me \"twenty years later\"\n\n![](https://miro.medium.com/max/6528/1*hgvNxj7QaqyaIZppEce8hw.jpeg)\n\n\nThanks to Esteban Maringolo for noticing that FAST has its own Chris Anderson in Hernán Wilkinson from 10Pines. You almost can notice how he is mesmerized by Nicolás Papagna's TED-style talk☺\n\n![](https://miro.medium.com/max/6528/1*kES4VocvIvy6uztlt-ZoEw.jpeg)\n\n\nFrom left to right: Esteban Maringolo, Jannik Laval, Sebastian Sastre, Adam Jacques, Prof. John Sarkela, Josh Fridstorm, Kurt Kilpela and","createdAt":"2019-09-08T01:22:32.582Z","updatedAt":{"$$date":1567906168239},"tags":[],"clapsCount":0,"excerpt":"![](https://miro.medium.com/max/2560/1*bh9KXrRuT1gNP9B3xcakDA.jpeg)\n\nIn November 5, 6 and 7th I was at Smalltalks2014 where I presented a talk about Startups and Smalltalk that mentions flow.\n\nI want to say a thanks to the organizers for having me there to bring this topic that gave me the opportunity to share this information among many Smalltalk enthusiasts, but also because I met new friends and found some old ones.\n\nOne common theme I've found: I had many great and deep conversations with lots of them. There is something fundamental that is interesting about this technology that seems to make people to be really conscious and thoughtful.\n","_id":"Go7wypT3Po8vjRTK","publishedAt":"2014-11-28"}
{"title":"Context is King","subtitle":"","slug":"context-is-king","body":"When you trust your content is when you can forget it. At that point you’ll get that Context is King.\n\n> …to make a Leonardo you need more than his innate ability. You also need Florence in 1450. \n> Paul Graham.\n\nYes I know… we are not da Vinci, we don’t have Florence in 1450 nor we have a Medici patron for our talent.\n\nFlorence in 1450 is context. The problem is that without an appropriate context talent is useless. To be fair, not useless but seriously compromised. That’s why talented people want to run away from places that are hostile to their talent and, the opposite of that problem: knowing how to build appropriated contexts will cultivate talent and open you more doors than working on the content. The good part: today is simpler and cheaper to build desirable contexts so wealth creation can find its way to be deployed in the world.\n\n**Some examples:**\n\n* A blank sheet of paper, something to write and a pleasant ambiance.\n* Your laptop + WiFi in an inspiring coffehouse.\n* To be able to write about high culture in a conversational tone.\n* A great story for you blog or, way better, book chapter.\n* When the world gives you the present of a synchronicity or a serendipity.\n* Your sketching tools and your favorite music in the background.\n* Finding the layout that works.\n* Your design when it has your rules and honors the basic principles at the same time.\n* To fit that image in the rule of thirds. And the right light and shadows!\n* When you make your model feeling natural and engaged during the shots.\n* Your camera and accessories in an historical moment.\n* To be able to capture technically well without being distracted by technical stuff.\n* When you can make your actors to inspire one to each other when filming.\n* Your musical instrument and a couple of friends.\n* To relax before an audition confident on your practices.\n* The visual finalization details of your site.\n* The usability of your application.\n* The ambiance you were able to architect.\n* A customer has a problem you can help with.\n* The results created by your movement before asking for donations.\n* To say “hello” with a sincere smile.\n* To listen your interlocutor’s problem.\n* To ask the right question.\n* When you renew the inspiration and hope of a member of your community.\n* Your intervention adding momentum to a project.\n\nBecause context is dynamic in nature, it can be very brief. When you get one that works take advantage of it putting all the momentum in the substance and commit to the truth. If you do that you can be sure you will be closer to some valuable things:\n\nThe identity of what you provide will be faithful to what you are.\n\nYour talents will have a better chance to shine over their opposite keeping what you don’t like in you at a safe distance.\nWhen something you don't like comes up, the feedback will be more useful because is the right input on the right problem, which leads to good diagnosis and good reviews and solutions.\n\nUltimately this is useful because all the contexts you manage to build are the real signature of your consciusness and you can be familiar with it while, unfortunately, most people don’t even know they have one.\n\n*Originally published in July 7, 2009. Reviewed in November 17, 2017*","createdAt":"2019-09-06T21:37:21.268Z","updatedAt":{"$$date":1567903953676},"tags":[],"clapsCount":0,"excerpt":"When you trust your content is when you can forget it. At that point you’ll get that Context is King.\n\n> …to make a Leonardo you need more than his innate ability. You also need Florence in 1450.\n> Paul Graham.\n\nYes I know… we are not da Vinci, we don’t have Florence in 1450 nor we have a Medici patron for our talent.","_id":"IEvcSpFiA0OGFfhk","publishedAt":"2009-07-07"}
{"title":"The Smalltalk IDE I wish would exist","subtitle":"","slug":"the-smalltalk-ide-i-wish-would-exist","body":"When I was using Smalltalk in a daily basis I had the chance to understand quite well the things that would make productivity go high.\nHere are some sketches I’ve done. I didn’t do the debugger and the package manager system, and both of them have great impact on this but hopefully you can imagine how productive this could be.\n\n![](https://miro.medium.com/max/8192/1*ilwBqraykIpuum_qyG9CUw.jpeg)\n\n\nAll collapsed by default.\n\n![](https://miro.medium.com/max/8192/1*xpE6dTOv5A1tTn8s2n4FvA.jpeg)\n\n\nA bottom bar opens with focus on the input ready to evaluate anything or open common tools in one click or key combination.\n\n![](https://miro.medium.com/max/8192/1*q78OV588lkpJmwyK24DmVw.jpeg)\n\n\nThe classic time-proven Class Hierarchy Browser has two major changes: 1. it exposes a maximised hierarchy so abstractions can be visually inferred and exploration encouraged and 2. it has a permanently exposed input to a case-insensitive search that will help the user to frictionlessly jump to classes and method names.\n\n![](https://miro.medium.com/max/8192/1*oJ5fe8entfCczlhMENZjsg.jpeg)\n\nEverything can be clean again.\n\n![](https://miro.medium.com/max/8192/1*dZoK8NFM6-N9cmyYvi5zag.jpeg)\n\nFloating windows with snippets that can spawn from the main expression input at the lower-left. Floating windows are important because they allow drag-grop operations between them.\nOn the top of the code pane, the Class Hyerarchy Browser should have exposed a couple of buttons (no more than 4 to 6) with commands that should follow a cache strategy. They should be the absolutely most basic and frequently used commands, like remove method, find senders, find implementors, versions and perhaps not anything else (unless we have data that proves is a hot cache hit).","createdAt":"2019-09-08T01:09:31.780Z","updatedAt":{"$$date":1567905692434},"tags":[],"clapsCount":0,"excerpt":"When I was using Smalltalk in a daily basis I had the chance to understand quite well the things that would make productivity go high.\nHere are some sketches I’ve done. I didn’t do the debugger and the package manager system, and both of them have great impact on this but hopefully you can imagine how productive this could be.","_id":"JA4SwGxWvGUXjc72","publishedAt":"2015-06-02"}
{"title":"The way you understood it wrong","subtitle":"","slug":"the-way-you-understood-it-wrong","body":"When I was doing engineering, I had a very good algebra teacher.* Those where the days full of vectors and subspaces and subspaces of polynomials and matrices and subspaces of matrices of polynomials.\n\nAll from 7 a.m to 12 p.m.\n\nIn the middle of that math trench he said once something that my head really saved.\n\nThe teacher was explaining yet another concept while the sky was still dark in the morning and there was this guy that asked him to clarify a detail.\n\nThe question was asked and the teacher clarified.\n\nHe was a good teacher so, before moving on, he asked to this student if the idea was now understood.\n\nHe wanted this student validation.\n\nThe guy said ‘yes’ and right away this student started to describe all sorts of details about how he was reaching to the wrong conclusions by following an alternative reasoning based on the wrong assumptions he had while not having clear what he later asked about.\n\nThe teacher stopped him saying something I've never forgot:\n\nNo, no, wait, wait. Please do not explain me how you understood it wrong. Tell me instead how you're going to remember it right.\n \n ______\n \nUpdate: together with my good friend Pablo Dobrusin we joined efforts and figured out who the teacher was, he was Fernando Acero at FIUBA - Facultad de Ingeniería Universidad de Buenos Aires.\n\nTimeless insight.\n\nHats off to teachers like that.","createdAt":"2019-09-06T21:45:58.341Z","updatedAt":{"$$date":1567904033156},"tags":[],"clapsCount":0,"excerpt":"","_id":"cTQGfmAoHaW1qcCT","publishedAt":"2014-07-10"}
{"title":"Improving the Amber Experience","subtitle":"Some small steps to improve the productivity and overall experience of developing with Amber Smalltalk","slug":"improving-the-amber-experience","body":"There are many things we can do to have an Amber Smalltalk IDE that makes the difference in terms of developing experience and productivity. The best ones take a lot of effort that is currently unfunded.\nMaybe we should start a Kickstart campaign and change that. But in the meantime why not do smaller steps in the right direction? We could do small incremental improvements with what we already have.\n\nSo for now, let’s take a look at the current IDEs: Helios and Legacy IDE.\n\nWhy I don’t like Helios?\n\nFirst of all, is totally okay to like Helios and I personally liked that Nicolas tried to innovate on the Smalltalk IDE design. I’ve talked with him many times about it and I’ve helped to implement it with some contributions in the inspector and workspace.\nInnovation on the Smalltalk IDE it’s not something trivial because the traditional designs are extremely well validated and pass the test of time.\n\nStill, there is room to innovate the Smalltalk IDE and truth is that even I have already some drafts on what a rockstar Smalltalk IDE would be. I’m validating its design with some inner-circle veteran developers before any disclosing or deciding to do anything beyond some UX/UI drafts.\n\nThe thing is I’ve tried hard with Helios and it really didn’t work for me. You could say that is a matter of preference on developing taste for stateful User Interfaces, like “are you a vi person or a non-vi person?”\n\nBut is not.\n\nWith time I’ve got some muscular training on getting the right key combinations and end up doing things apparently fast. It wasn’t. The deal-breaker for me was a pragmatic test on plain old productivity.\n\nHelios takes too much time to pop-up and open and hides some actions behind a wall of sequenced keystrokes while the classic IDE provides an instant embedded open and is more “mouse friendly.”\n\nIn the end, Economics decided for me. Yes, Helios could connect to a remote environment but (a) that does not happen today and (b) might never do because the development of that feature, sadly, is not moving forward. The day to day result is that Helios made me overall less productive and slower than using the good old Legacy IDE.\n\nHence the divorce.\n\nSo after moving away from it I’ve started to see new things and try to figure out new possibilities and I’ve come to the personal conclusion that for the goal of having a more productive and overall better User Experience developing with Amber, it would take significantly less effort to make the Legacy IDE way better than Helios way better.\n\nI am the only one perceiving this?\n\nHow do you use Amber to code? Here is a poll I’m running to understand this question better.\n\nI hope this doesn’t sound rhetorical because this is a genuine question I have. I can easily just fork and do the incremental adjustments I want to see done on the classic IDE or, I can bother myself in trying to amplify those benefits for the whole community.\nAnd I don’t know what to do yet.\n\nWhat do you think? Should I try to promote this Legacy IDE improvements and fixes in the official Amber repo or just fork? Please help this spread and leave a comment with your preference so our community can find it and know.\n\nHere is the issue I’ve tentatively opened:\nhttps://github.com/amber-smalltalk/amber-attic/issues/3\n\nStating these problems as a start:\n\n* Typography issues\n* Poor contrast issues\n* Focus issues\n* Lack of search keyboard shortcut\n* Tab close area too small\n* SUnit button alignment\n* Horizontal arrow keys should change the pane in focus (on Browser and SUnit)\n* Vertical arrow keys should change the selected list item when focus is in a list pane\n* Save button disabled on pristine\n* Class browse shortcut\n* Icons on the class list\n* Icons on the package list\n* Drag and drop to categorise methods\n* Marking changed packages\n* Visual feedback on successful commit finished\n* Visual feedback on failed commit (handle exception and display proper message)\n* Select and change theme easily and persist the preference on localStorage\n* Change theme to be dark by default","createdAt":"2019-09-08T01:07:40.680Z","updatedAt":{"$$date":1567904954971},"publishedAt":"2015-01-31","tags":[],"clapsCount":0,"excerpt":"","_id":"oZ2Y49AGr9cOacyM"}
{"title":"Accepting vs. Selective","subtitle":"A meditation on how the tension between being more accepting or more rigorous influences design.","slug":"accepting-vs-selective","body":"Keeping the engines running, understandably, demands attention and energy into maintaining the statu quo. A defence of the current state.\n\nThings that go under the hood, the engines that keeps things moving reliably and performing well, they usually demand tighter error margins in all its parts. The people that takes care of the engine need to be selective and rigorous to keep the system producing value.\n\nBackends’ internal parts comes to mind.\n\nThink DevOps. Think about DBA's and sysadmins and all the backend’s gatekeepers curating its reliability. In a strike of rigour, they will happily pospone progress and innovation if things doesn't fit. The profile here is being conservative to only allow what preserves the system’s current production of value.\n\nNow let’s see things from the other side.\n\nIn order to create better User Experiences you usually need to go in the exact opposite direction.\n\nA more accepting User Interface is a less rigorous and less selective interface. In other words, an interface that can be used by a more diverse audience. One that is usable by many people with many different forms to see and experience the world.\n\nFinding one, can, in theory, happen by accident or in semi-random attempts, but it's more interesting to think in what could happen if you have a bunch of folks intentionally pursuing that goal. What if they do that systematically?\n\nThey can raise the chances of getting there just because believing that they can makes them to pay more attention to detect when they have produced something that resonates with a wider audience.\n\nIf they find the thing that works for more people, those guys go from naïve experimenters to startup founders to change makers to hight-impact entrepreneurs.\n\nThe Lean Startup method is trying to help on that.\n\nAny product they will try to build, will intentionally be closer to the Robustness Principle.\n\nIn computing, the robustness principle, or Postel’s Law, is a general design guideline for software:\n\nBe conservative in what you do, be liberal in what you accept from others (often reworded as “Be conservative in what you send, be liberal in what you accept”).\n\nThis is really hard to do because it points the self-criticism (rigor) to oneself and intentionally deescalates the rigor and demands on others. This is usually the exact opposite of what the forces of the Ego ask you to do. The Ego will distract you from that because is basically a self-serving endpoint that neutralises network value creation.\n\nAnd here is the strategic opportunity:\n\nBecause is really hard to do, most people is simply not even willing to try so there is way less competition in that direction. \n\nBecause being more accepting and generous to others usually connects people (and that raises the value of the network).\n\nBecause is easier to distribute a product in a market if you know how to seduce it and generosity is the right start for that goal.\n\nThe Separation of Concerns between frontend and backend allows specialists to do their bests in each domain negotiating a sweet spot in this spectrum of tension between being more accepting vs. more selective.\n\nFullstack developers resolves this as inner-conflicts.\n\nAnd the way to level up the value for everybody in anything being made, is by constantly exposing the big picture so those specialists don’t get lost in micro-compartmentalized details that might easily diverge from a better future. When the specialists converge into something meaningful they can do something that people can believe in. When they are doing the thing, they can drive their energy inspiration and passion to it, instead of maintaining the statu quo by just doing the job.","createdAt":"2019-09-06T21:52:08.799Z","updatedAt":{"$$date":1567904258273},"tags":[],"clapsCount":0,"excerpt":"Keeping the engines running, understandably, demands attention and energy into maintaining the statu quo. A defence of the current state.\n\nThings that go under the hood, the engines that keeps things moving reliably and performing well, they usually demand tighter error margins in all its parts. The people that takes care of the engine need to be selective and rigorous to keep the system producing value.","_id":"vqilyV2pOp1E0PSu","publishedAt":"2015-01-23"}
